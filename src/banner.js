const chalk = require('chalk');

class Banner {
  static show() {
    console.clear();
    
    // Arte ASCII do Mangaba CLI com cores da fruta mangaba (amarelo, laranja, vermelho)
    const banner = `
${chalk.yellow('‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó')}${chalk.hex('#FFA500')('‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ')}${chalk.hex('#FF6347')('‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó')}${chalk.red('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ')}${chalk.yellow('‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ')}${chalk.hex('#FF8C00')('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ')}${chalk.hex('#FFD700')('‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ')}
${chalk.yellow('‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë')}${chalk.hex('#FFA500')('‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó')}${chalk.hex('#FF6347')('‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë')}${chalk.red('‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ')}${chalk.yellow('‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó')}${chalk.hex('#FF8C00')('‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó')}${chalk.hex('#FFD700')('‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó')}
${chalk.yellow('‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë')}${chalk.hex('#FFA500')('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë')}${chalk.hex('#FF6347')('‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë')}${chalk.red('‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó')}${chalk.yellow('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë')}${chalk.hex('#FF8C00')('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù')}${chalk.hex('#FFD700')('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë')}
${chalk.yellow('‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë')}${chalk.hex('#FFA500')('‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë')}${chalk.hex('#FF6347')('‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë')}${chalk.red('‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë')}${chalk.yellow('‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë')}${chalk.hex('#FF8C00')('‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó')}${chalk.hex('#FFD700')('‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë')}
${chalk.yellow('‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë')}${chalk.hex('#FFA500')('‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë')}${chalk.hex('#FF6347')('‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë')}${chalk.red('‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù')}${chalk.yellow('‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë')}${chalk.hex('#FF8C00')('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù')}${chalk.hex('#FFD700')('‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë')}
${chalk.yellow('‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù')}${chalk.hex('#FFA500')('‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù')}${chalk.hex('#FF6347')('‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù')}${chalk.red(' ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ')}${chalk.yellow('‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù')}${chalk.hex('#FF8C00')('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ')}${chalk.hex('#FFD700')('‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù')}
`;
    
    console.log(banner);
    
    // Subt√≠tulo com descri√ß√£o
    console.log(chalk.hex('#FF8C00')('                    ü•≠ Agente CLI de IA Agn√≥stico'));
    console.log(chalk.hex('#FFA500')('        Powered by OpenAI ‚Ä¢ Gemini ‚Ä¢ Claude ‚Ä¢ Ollama ‚Ä¢ HuggingFace ‚Ä¢ Cohere ‚Ä¢ Together ‚Ä¢ LocalAI ‚Ä¢ Groq'));
    console.log();
    
    // Linha decorativa
    console.log(chalk.dim('‚îÄ'.repeat(80)));
    console.log();
  }
  
  static showWelcome() {
    this.show();
    
    // Dicas de uso
    console.log(chalk.bold.white('üí° Dicas para come√ßar:'));
    console.log(chalk.cyan('1. ') + chalk.white('Configure uma API: ') + chalk.yellow('mangaba config'));
    console.log(chalk.cyan('2. ') + chalk.white('Execute uma tarefa: ') + chalk.yellow('mangaba task "sua pergunta"'));
    console.log(chalk.cyan('3. ') + chalk.white('Busque arquivos: ') + chalk.yellow('mangaba search "*.js"'));
    console.log(chalk.cyan('4. ') + chalk.white('Analise c√≥digo: ') + chalk.yellow('mangaba code arquivo.js'));
    console.log(chalk.cyan('5. ') + chalk.white('Pesquise na web: ') + chalk.yellow('mangaba web "Node.js tips"'));
    console.log();
    
    // Comandos dispon√≠veis
    console.log(chalk.bold.white('üõ†Ô∏è  Comandos dispon√≠veis:'));
    const commands = [
      { cmd: 'config', desc: 'Configurar APIs de LLM' },
      { cmd: 'task', desc: 'Executar tarefas com IA' },
      { cmd: 'search', desc: 'Buscar arquivos e conte√∫do' },
      { cmd: 'code', desc: 'Analisar e refatorar c√≥digo' },
      { cmd: 'web', desc: 'Pesquisar na internet' },
      { cmd: 'memory', desc: 'Gerenciar contexto' },
      { cmd: 'shell', desc: 'Executar comandos shell' },
      { cmd: 'stats', desc: 'Ver estat√≠sticas' },
      { cmd: 'tools', desc: 'Descobrir ferramentas' }
    ];
    
    commands.forEach(({ cmd, desc }) => {
      console.log(chalk.green(`  ${cmd.padEnd(8)}`) + chalk.gray(desc));
    });
    
    console.log();
    console.log(chalk.dim('‚îÄ'.repeat(80)));
    console.log(chalk.gray('üí° Use ') + chalk.yellow('mangaba --help') + chalk.gray(' para mais informa√ß√µes'));
    console.log();
  }
  
  static showQuickStart() {
    this.show();
    
    console.log(chalk.bold.white('üöÄ In√≠cio R√°pido:'));
    console.log();
    
    console.log(chalk.cyan('1. Configura√ß√£o Inicial'));
    console.log(chalk.gray('   Configure pelo menos um provedor de IA:'));
    console.log(chalk.yellow('   $ mangaba config'));
    console.log();
    
    console.log(chalk.cyan('2. Primeira Tarefa'));
    console.log(chalk.gray('   Execute sua primeira tarefa:'));
    console.log(chalk.yellow('   $ mangaba task "Explique o que √© Node.js"'));
    console.log();
    
    console.log(chalk.cyan('3. An√°lise de C√≥digo'));
    console.log(chalk.gray('   Analise um arquivo de c√≥digo:'));
    console.log(chalk.yellow('   $ mangaba code src/cli.js --action analyze'));
    console.log();
    
    console.log(chalk.cyan('4. Busca Inteligente'));
    console.log(chalk.gray('   Encontre arquivos no projeto:'));
    console.log(chalk.yellow('   $ mangaba search "*.json" --type file'));
    console.log();
    
    console.log(chalk.cyan('5. Pesquisa Web'));
    console.log(chalk.gray('   Pesquise informa√ß√µes online:'));
    console.log(chalk.yellow('   $ mangaba web "JavaScript best practices 2024"'));
    console.log();
    
    console.log(chalk.dim('‚îÄ'.repeat(80)));
    console.log(chalk.gray('üìö Documenta√ß√£o completa: ') + chalk.blue('README.md'));
    console.log(chalk.gray('üéØ Exemplos pr√°ticos: ') + chalk.blue('examples/demo-usage.md'));
    console.log();
  }
  
  static showProviders() {
    this.show();
    
    console.log(chalk.bold.white('üîå Provedores de IA Suportados:'));
    console.log();
    
    const providers = [
      {
        name: 'OpenAI',
        icon: 'üß†',
        models: ['gpt-4', 'gpt-3.5-turbo', 'gpt-4-turbo'],
        desc: 'Modelos GPT da OpenAI - Excelente para tarefas gerais'
      },
      {
        name: 'Google Gemini',
        icon: 'üíé',
        models: ['gemini-pro', 'gemini-pro-vision'],
        desc: 'Gemini do Google - √ìtimo para an√°lise e c√≥digo'
      },
      {
        name: 'Anthropic Claude',
        icon: 'üé≠',
        models: ['claude-3-opus', 'claude-3-sonnet', 'claude-3-haiku'],
        desc: 'Claude da Anthropic - Forte em racioc√≠nio e an√°lise'
      },
      {
        name: 'Ollama',
        icon: 'üè†',
        models: ['llama2', 'mistral', 'codellama'],
        desc: 'Modelos locais - Privacidade e uso offline'
      },
      {
        name: 'HuggingFace',
        icon: 'ü§ó',
        models: ['microsoft/DialoGPT-large', 'facebook/blenderbot-400M'],
        desc: 'Hub de modelos open source - Diversidade e inova√ß√£o'
      },
      {
        name: 'Cohere',
        icon: 'üîÆ',
        models: ['command', 'command-light', 'command-nightly'],
        desc: 'Modelos Cohere - Especializado em texto e conversa√ß√£o'
      },
      {
        name: 'Together AI',
        icon: 'üöÄ',
        models: ['llama-2-70b-chat', 'mistral-7b-instruct', 'codellama-34b'],
        desc: 'Plataforma com 50+ modelos open source otimizados'
      },
      {
        name: 'LocalAI',
        icon: 'üîí',
        models: ['gpt-3.5-turbo', 'llama2', 'vicuna'],
        desc: 'Execute modelos localmente - M√°xima privacidade'
      },
      {
        name: 'Groq',
        icon: '‚ö°',
        models: ['llama-3.1-70b', 'mixtral-8x7b', 'gemma-7b'],
        desc: 'Infer√™ncia ultra-r√°pida com hardware especializado'
      }
    ];
    
    providers.forEach(provider => {
      console.log(chalk.bold(`${provider.icon} ${provider.name}`));
      console.log(chalk.gray(`   ${provider.desc}`));
      console.log(chalk.cyan(`   Modelos: ${provider.models.join(', ')}`));
      console.log();
    });
    
    console.log(chalk.dim('‚îÄ'.repeat(80)));
    console.log(chalk.gray('‚öôÔ∏è  Configure com: ') + chalk.yellow('mangaba config'));
    console.log(chalk.gray('üìã Veja configurados: ') + chalk.yellow('mangaba list'));
    console.log();
  }
  
  static showVersion(version = '1.0.0') {
    this.show();
    
    console.log(chalk.bold.white(`üì¶ Mangaba CLI v${version}`));
    console.log();
    
    console.log(chalk.gray('Desenvolvido com ‚ù§Ô∏è  para a comunidade de desenvolvedores'));
    console.log(chalk.gray('Licen√ßa: MIT'));
    console.log(chalk.gray('Reposit√≥rio: https://github.com/seu-usuario/mangaba-cli'));
    console.log();
    
    console.log(chalk.bold.white('üîß Tecnologias:'));
    console.log(chalk.cyan('‚Ä¢ Node.js') + chalk.gray(' - Runtime JavaScript'));
    console.log(chalk.cyan('‚Ä¢ Commander.js') + chalk.gray(' - Interface CLI'));
    console.log(chalk.cyan('‚Ä¢ Inquirer.js') + chalk.gray(' - Prompts interativos'));
    console.log(chalk.cyan('‚Ä¢ Chalk') + chalk.gray(' - Cores no terminal'));
    console.log(chalk.cyan('‚Ä¢ Axios') + chalk.gray(' - Requisi√ß√µes HTTP'));
    console.log();
    
    console.log(chalk.dim('‚îÄ'.repeat(80)));
    console.log(chalk.gray('üÜï Atualiza√ß√µes: ') + chalk.yellow('npm update -g mangaba-cli'));
    console.log();
  }
  
  static showError(message) {
    console.log();
    console.log(chalk.red('‚ùå Erro: ') + chalk.white(message));
    console.log();
    console.log(chalk.gray('üí° Dicas:'));
    console.log(chalk.gray('‚Ä¢ Verifique se as APIs est√£o configuradas: ') + chalk.yellow('mangaba list'));
    console.log(chalk.gray('‚Ä¢ Configure uma API: ') + chalk.yellow('mangaba config'));
    console.log(chalk.gray('‚Ä¢ Veja a ajuda: ') + chalk.yellow('mangaba --help'));
    console.log();
  }
  
  static showSuccess(message) {
    console.log();
    console.log(chalk.green('‚úÖ Sucesso: ') + chalk.white(message));
    console.log();
  }
  
  static showLoading(message = 'Processando...') {
    const frames = ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è'];
    let i = 0;
    
    return setInterval(() => {
      process.stdout.write(`\r${chalk.cyan(frames[i])} ${chalk.white(message)}`);
      i = (i + 1) % frames.length;
    }, 100);
  }
  
  static stopLoading(interval) {
    clearInterval(interval);
    process.stdout.write('\r');
  }
}

module.exports = Banner;